@page "/AtletaEdit"

@using System.Text
@using System.Text.Json;
@using System.Net.Http.Headers;

@using fut5.Data
@using fut5.Services

@inject NavigationManager NavigationManager


<h1>Editar</h1>

@if (atletas == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <label>@mylabel</label>

     @foreach (var a in atletas)
    {
        <p><span><input @bind="@a.Nome"></span></p>
        <p><span><input @bind="@a.Pass"></span>&nbsp;PIN</p>
        <p><span><input type="checkbox" @bind="@a.Ativo"></span>&nbsp;Ativo</p>
        <p><span><input type="checkbox" @bind="@a.IsAdmin"></span>&nbsp;Admin</p>
        <p><span><button class="btn btn-primary" @onclick="()=>atletaEditSave(a)">Save</button></span></p>
    }
}

<span style="white-space: pre-line">@ExceptionMessage</span>

@code {

    String @mylabel = "";
    private String @ExceptionMessage = "";
    private Atleta[] atletas = null;

    protected override async Task OnInitializedAsync()
    {
        var apiUrl = "";
        try
        {
            mylabel = NavigationManager.Uri.ToString();
            var atletaEmail = mylabel.Substring(mylabel.IndexOf('?') + 1, mylabel.Length - mylabel.IndexOf('?') - 1);
            mylabel = atletaEmail;
            apiUrl = Fut5ApiService.BaseUrl + $"atletaget/{atletaEmail}";

            // fetch atleta
            // Fut5ApiService.apiClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Fut5ApiService.Token);
            var responseData = await Fut5ApiService.apiClient.GetStringAsync(apiUrl);
            var c = JsonSerializer.Deserialize<List<Atleta>>(responseData, new JsonSerializerOptions {PropertyNameCaseInsensitive = true});
            atletas = c.ToArray<Atleta>();

            if (atletas.Length == 0) // Não existe na base
            {   // Criar um novo e dar a hipótese de gravar
                var novo = new Atleta("", atletaEmail, Math.Floor(new Random().NextDouble() * 9999).ToString("0000") , false, false);
                var l = new List<Atleta>();
                l.Add(novo);
                atletas = l.ToArray<Atleta>();
            }
        }
        catch (Exception exception)
        {
            System.Diagnostics.Debug.WriteLine("CAUGHT EXCEPTION:");
            System.Diagnostics.Debug.WriteLine(exception);
            ExceptionMessage = $"Error contacting API:\n{apiUrl}\n{exception.Message}";
        }
    }

    private async Task atletaEditSave(Atleta a)
    {
        var apiUrl = "";
        try
        {
            mylabel = a.Email;
            // todo: validate
            // https://www.aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/
            // Fut5ApiService.apiClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Fut5ApiService.Token);
            a.Email = a.Email.Trim().ToLower();
            var content = new StringContent(JsonSerializer.Serialize<Atleta>(a), Encoding.UTF8, "application/json");
            apiUrl = Fut5ApiService.BaseUrl + "AtletaSave";
            var result = await Fut5ApiService.apiClient.PostAsync(apiUrl, content);
            // Think twice before calling Result on a Async method https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html

            NavigationManager.NavigateTo("/Atletas");
        }
        catch (Exception exception)
        {
            System.Diagnostics.Debug.WriteLine("CAUGHT EXCEPTION:");
            System.Diagnostics.Debug.WriteLine(exception);
            ExceptionMessage = $"Error contacting API:\n{apiUrl}\n{exception.Message}";
        }
    }
}
